"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const _1 = require(".");
function generateJSON() {
    return __awaiter(this, void 0, void 0, function* () {
        const version = process.argv[2] || "latest";
        let types;
        if (!_1.moonbeamDefinitions.types) {
            throw new Error("missing types definitions");
        }
        else if (version === "latest") {
            types = _1.moonbeamDefinitions.types[_1.moonbeamDefinitions.types.length - 1].types;
        }
        else if (Number(version)) {
            let i = 0;
            while (i < _1.moonbeamDefinitions.types.length &&
                _1.moonbeamDefinitions.types[i].minmax[1] &&
                Number(_1.moonbeamDefinitions.types[i].minmax[1]) < Number(version)) {
                i += 1;
            }
            types = _1.moonbeamDefinitions.types[i].types;
        }
        else {
            throw new Error("parameter must be number or `latest`");
        }
        console.log(JSON.stringify(types));
        fs_1.default.appendFile("moonbeam-types-" + version + ".json", JSON.stringify(types), function (err) {
            if (err)
                throw err;
            console.log("Saved for version : " + version);
        });
    });
}
generateJSON();
